in the scenario that we had only changed the fucntions of sin, cos, exp, we obtained only a margin al three percent gain
then to verofy if there was any performance to be gain in the beginninng,
we made a performance comparison with sin float and cos and exp functions seperately
tghey gave respectfully 8, 5 , 10 percent gains over their corresponding double partners.  
the experiments are kept in somewhere here. in the experiments itried to repect the conversions too, and with that i obtained 10 percent. 

roman had  suspected that the marginal result mnight be because of the castings that the functions do because we did not change other parts.
therefore now we are porting the cross and update functions to single precision,
we change the constants to float and double defined variables to single defined variables.

----
V1 Notes 
----
Only the function bodies of the cross and update are changed, 
almost no improvement is achieved, 
then the castings are adressed and the savings are entered to the document 
----

WORKING WITH FULL_FUNCS_MAX_ABS ==> NOW V2

----
04.08 notes:
----
working with = mixed_prec_full_funcs_max_abs 
----
1\ r8_max and r8_abs functions are changed to float
    they are added with _f extentions
    measurements yielded no change in accuracy but also no change in time 
    ANSWER TO ROMANS QUESTION : 
    https://en.cppreference.com/w/cpp/language/default_initialization#Notes
    hmmm according to documentation, to my understanding, 
    the behaviour should be undetermined 

2\ cross function return type and the arguments are changed to float 

A\ x,y,z are changed to float in the main, 
Therefore : 
3\ source_f function is added, the arguments and the function body changed to float 

4\ update_f function is added: before that we had only changed
mu, azm and d to float,
now the xyz are also changed 
their internal variables are also changed to float 

5\ azm, mu and d are declared as float in the main 
6\ thick is changed to float in the main
7\ consequently the scatter fucntion is also changed to float
with e still double!!
8\dist2c icin dist2c_cf versioyonu eklendi, cross_f i cagiriyor, 
but the other fucntion body variables are also changed 
function return type is changed 
log --> is not changed 

\\I also changed the absorm function, it seems only a logical follow up 


note: I HAVENT THOUCHED THE ENERGY VARIABLE E IN THE MAIN AND 
and thefunction that assigns energy, we did not examine it with roman 
TO DO : instrument r8_uniform_01 alone, dont touch others only change this one,
on the integer arithmetic of r8 uniform : https://dl.acm.org/doi/pdf/10.1145/22721.356187


question: when uploading to github, 
1\ when uploading a code from someonelse, is there any thing I should Pay attention to ? 
2\ normally my scripts are made my way, If I am going to public 
the repo shoould I do them for everyone ? 
3\ dont forget to add explanationss 

